version: "3.9"

services:

  # Allure Gateway is Key component of Allure TestOps responsible for routing and auth sessions
  allure-gateway:
    restart: always
    image: ${ALLURE_REGISTRY}/${ALLURE_SLUG}/allure-gateway:${ALLURE_VERSION}-compose
    container_name: allure-gateway
    networks:
      - allure-net
    ports:
      - "${ALLURE_GATEWAY_PORT}:${ALLURE_GATEWAY_PORT}"
    healthcheck:
      test: "curl -f http://localhost:${ALLURE_GATEWAY_PORT}/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    environment:
      TZ: ${TZ}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_JWT_SECRET: ${ALLURE_JWT_SECRET}
      ALLURE_SECURE: ${ALLURE_SECURE_COOKIE}
      ALLURE_JWT_ACCESS_TOKEN_VALIDITY_SECONDS: ${ALLURE_SESSION_DURATION}
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      SPRING_SESSION_STORE_TYPE: REDIS
      SPRING_REDIS_HOST: ${ALLURE_REDIS_HOST}
      SPRING_REDIS_PORT: ${ALLURE_REDIS_PORT}
      SPRING_REDIS_PASSWORD: ${ALLURE_REDIS_PASS}
      SPRING_CLOUD_CONSUL_ENABLED: "true"
      SPRING_CLOUD_CONSUL_HOST: ${CONSUL_HOST}
      SPRING_CLOUD_CONSUL_PORT: ${CONSUL_PORT}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"

  # Allure UAA is Key component of Allure TestOps responsible for auth
  allure-uaa:
    restart: always
    image: ${ALLURE_REGISTRY}/${ALLURE_SLUG}/allure-uaa:${ALLURE_VERSION}-compose
    container_name: allure-uaa
    networks:
      - allure-net
    healthcheck:
      test: "curl -f http://localhost:${ALLURE_UAA_PORT}${ALLURE_UAA_CONTEXT_PATH}/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    environment:
      TZ: ${TZ}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_ENDPOINT: ${ALLURE_PROTO}://${ALLURE_HOST}
      ALLURE_JWT_SECRET: ${ALLURE_JWT_SECRET}
      ALLURE_CRYPTO_PASSWORD: ${ALLURE_CRYPTO_PASSWORD}
      ALLURE_SECURITY_USER_NAME: ${ALLURE_ADMIN}
      ALLURE_SECURITY_USER_PASSWORD: ${ALLURE_ADMIN_PASS}
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      SPRING_CLOUD_CONSUL_ENABLED: "true"
      SPRING_CLOUD_CONSUL_HOST: ${CONSUL_HOST}
      SPRING_CLOUD_CONSUL_PORT: ${CONSUL_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ALLURE_UAA_DB_HOST}:${ALLURE_UAA_DB_PORT}/${ALLURE_UAA_DB_NAME}?assumeMinServerVersion=11&ApplicationName=${ALLURE_UAA_SERVICE_NAME}
      SPRING_DATASOURCE_USERNAME: ${ALLURE_UAA_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ALLURE_UAA_DB_PASS}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQL9Dialect
      SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS: 'true'
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
    profiles:
      - default

  allure-uaa-ldap:
    restart: always
    image: ${ALLURE_REGISTRY}/${ALLURE_SLUG}/allure-uaa:${ALLURE_VERSION}-compose
    container_name: allure-uaa
    networks:
      - allure-net
    healthcheck:
      test: "curl -f http://localhost:${ALLURE_UAA_PORT}${ALLURE_UAA_CONTEXT_PATH}/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    environment:
      TZ: ${TZ}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_ENDPOINT: ${ALLURE_PROTO}://${ALLURE_HOST}
      ALLURE_JWT_SECRET: ${ALLURE_JWT_SECRET}
      ALLURE_CRYPTO_PASSWORD: ${ALLURE_CRYPTO_PASSWORD}
      ALLURE_SECURITY_USER_NAME: ${ALLURE_ADMIN}
      ALLURE_SECURITY_USER_PASSWORD: ${ALLURE_ADMIN_PASS}
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      SPRING_CLOUD_CONSUL_ENABLED: "true"
      SPRING_CLOUD_CONSUL_HOST: ${CONSUL_HOST}
      SPRING_CLOUD_CONSUL_PORT: ${CONSUL_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ALLURE_UAA_DB_HOST}:${ALLURE_UAA_DB_PORT}/${ALLURE_UAA_DB_NAME}?assumeMinServerVersion=11&ApplicationName=${ALLURE_UAA_SERVICE_NAME}
      SPRING_DATASOURCE_USERNAME: ${ALLURE_UAA_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ALLURE_UAA_DB_PASS}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQL9Dialect
      SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS: 'true'
      ALLURE_LOGIN_PRIMARY: ldap
      ALLURE_LOGIN_LDAP_ENABLED: 'true'
      ALLURE_LOGIN_LDAP_REFERAL: follow
      ALLURE_LOGIN_LDAP_URL: ${LDAP_URL}
      ALLURE_LOGIN_LDAP_USERDNPATTERNS: ${LDAP_USER_DN_PATTERNS}
      ALLURE_LOGIN_LDAP_USERSEARCHBASE: ${LDAP_USER_SEARCH_BASE}
      ALLURE_LOGIN_LDAP_USERSEARCHFILTER: ${LDAP_USER_SEARCH_FILTER}
      ALLURE_LOGIN_LDAP_GROUPSEARCHBASE: ${LDAP_GROUP_SEARCH_BASE}
      ALLURE_LOGIN_LDAP_GROUPSEARCHFILTER: ${LDAP_GROUP_SEARCH_FILTER}
      ALLURE_LOGIN_LDAP_GROUPROLEATTRIBUTE: ${LDAP_GROUP_ROLE_ATTRIBUTE}
      ALLURE_LOGIN_LDAP_SYNCROLES: 'true'
      ALLURE_LOGIN_LDAP_UIDATTRIBUTE: ${LDAP_UID_ATTRIBUTE}
      ALLURE_LOGIN_LDAP_GROUPAUTHORITIES_ROLEUSERGROUPS: ${LDAP_MAPPING_ROLE_USERS}
      ALLURE_LOGIN_LDAP_GROUPAUTHORITIES_ROLEADMINGROUPS: ${LDAP_MAPPING_ROLE_ADMINS}
      ALLURE_LOGIN_LDAP_DEFAULTROLE: ${LDAP_DEFAULT_ROLE}
      ALLURE_LOGIN_LDAP_USERDN: ${LDAP_LOGIN_SA}
      ALLURE_LOGIN_LDAP_PASSWORD: ${LDAP_LOGIN_SA_PASS}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
    profiles:
      - ldap

  # Allure UAA is Key component of Allure TestOps responsible for main functional
  allure-report:
    restart: always
    image: ${ALLURE_REGISTRY}/${ALLURE_SLUG}/allure-report:${ALLURE_VERSION}-compose
    container_name: allure-report
    networks:
      - allure-net
    healthcheck:
      test: "curl -f http://localhost:${ALLURE_REPORT_PORT}${ALLURE_REPORT_CONTEXT_PATH}/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    environment:
      TZ: ${TZ}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_ENDPOINT: ${ALLURE_PROTO}://${ALLURE_HOST}
      ALLURE_CRYPTO_PASSWORD: ${ALLURE_CRYPTO_PASSWORD}
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      SPRING_CLOUD_CONSUL_ENABLED: "true"
      SPRING_CLOUD_CONSUL_HOST: ${CONSUL_HOST}
      SPRING_CLOUD_CONSUL_PORT: ${CONSUL_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ALLURE_REPORT_DB_HOST}:${ALLURE_REPORT_DB_PORT}/${ALLURE_REPORT_DB_NAME}?assumeMinServerVersion=11&ApplicationName=${ALLURE_REPORT_SERVICE_NAME}
      SPRING_DATASOURCE_USERNAME: ${ALLURE_REPORT_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ALLURE_REPORT_DB_PASS}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQL9Dialect
      SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS: 'true'
      SERVER_ERROR_INCLUDE_STACKTRACE: always
      SPRING_DATASOURCE_HIKARI_CONNECTIONTIMEOUT: "60000"
      SPRING_RABBITMQ_HOST: ${ALLURE_RABBIT_HOST}
      SPRING_RABBITMQ_PORT: ${ALLURE_RABBIT_PORT}
      SPRING_RABBITMQ_USERNAME: ${ALLURE_RABBIT_USER}
      SPRING_RABBITMQ_PASSWORD: ${ALLURE_RABBIT_PASS}
      ALLURE_BLOBSTORAGE_TYPE: S3
      ALLURE_BLOBSTORAGE_S3_PATHSTYLEACCESS: ${ALLURE_S3_SECRET_PATHSTYLE}
      ALLURE_BLOBSTORAGE_S3_ENDPOINT: ${ALLURE_S3_MINIO_URL}
      ALLURE_BLOBSTORAGE_S3_BUCKET: ${ALLURE_S3_BUCKET}
      ALLURE_BLOBSTORAGE_S3_REGION: ${ALLURE_S3_REGION}
      ALLURE_BLOBSTORAGE_S3_ACCESSKEY: ${ALLURE_S3_ACCESS_KEY}
      ALLURE_BLOBSTORAGE_S3_SECRETKEY: ${ALLURE_S3_SECRET_KEY}
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: 'true'
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8

  uaa-db:
    restart: always
    image: postgres:14
    container_name: uaa-db
    networks:
      - allure-net
    volumes:
      - uaa-db-volume:/var/lib/postgresql/data
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${ALLURE_UAA_DB_NAME}
      POSTGRES_USER: ${ALLURE_UAA_DB_USERNAME}
      POSTGRES_PASSWORD: ${ALLURE_UAA_DB_PASS}
    profiles:
      - postgres

  report-db:
    restart: always
    image: postgres:14
    container_name: report-db
    networks:
      - allure-net
    volumes:
     - report-db-volume:/var/lib/postgresql/data
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${ALLURE_REPORT_DB_NAME}
      POSTGRES_USER: ${ALLURE_REPORT_DB_USERNAME}
      POSTGRES_PASSWORD: ${ALLURE_REPORT_DB_PASS}
    profiles:
      - postgres

  redis:
    restart: always
    image: bitnami/redis:6.2
    container_name: redis
    networks:
      - allure-net
    volumes:
      - redis-volume:/bitnami/redis/data
    environment:
      TZ: ${TZ}
      REDIS_PASSWORD: ${ALLURE_REDIS_PASS}
      REDIS_PORT_NUMBER: ${ALLURE_REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    profiles:
      - redis

  rabbitmq:
    restart: always
    image: bitnami/rabbitmq:3.8
    container_name: rabbit
    networks:
      - allure-net
    volumes:
      - rabbitmq-volume:/bitnami
    environment:
      RABBITMQ_USERNAME: ${ALLURE_RABBIT_USER}
      RABBITMQ_PASSWORD: ${ALLURE_RABBIT_PASS}
      RABBITMQ_ERL_COOKIE: ${RABBIT_ERLANG_COOKIE}
      RABBITMQ_NODE_PORT_NUMBER: ${ALLURE_RABBIT_PORT}
    profiles:
      - rabbit

  minio-local:
    restart: always
    image: bitnami/minio:2022
    container_name: minio-local
    networks:
      - allure-net
    volumes:
      - minio-volume:/data
    environment:
      MINIO_ROOT_USER: ${ALLURE_S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${ALLURE_S3_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: 'public'
    ports:
      - "9000:9000"
    profiles:
      - minio-local

  minio-proxy:
    restart: always
    image: quay.io/minio/minio
    container_name: minio-proxy
    networks:
      - allure-net
    volumes:
      - minio-cache:/minio-cache
    environment:
      MINIO_ROOT_USER: ${ALLURE_S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${ALLURE_S3_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: 'public'
      MINIO_CACHE: "on"
      MINIO_CACHE_DRIVES: /minio-cache
      MINIO_CACHE_QUOTA: 70
      MINIO_CACHE_AFTER: 3
      MINIO_CACHE_WATERMARK_LOW: 30
      MINIO_CACHE_WATERMARK_HIGH: 75
    entrypoint: "/bin/sh -c"
    command: >
      "minio gateway ${ALLURE_S3_PROVIDER} ${ALLURE_S3_URL}"
    profiles:
      - minio-proxy

  minio-local-provisioning:
    restart: "no"
    image: minio/mc
    container_name: minio-provisioning
    depends_on:
      - minio-local
    networks:
      - allure-net
    entrypoint: "/bin/sh -c"
    command: >
      "mc config host add minio ${ALLURE_S3_MINIO_URL} ${ALLURE_S3_ACCESS_KEY} ${ALLURE_S3_SECRET_KEY} --api S3v4 &&
      mc mb minio/${ALLURE_S3_BUCKET} --ignore-existing --region ${ALLURE_S3_REGION} &&
      mc admin info minio"
    profiles:
      - minio-local

  minio-proxy-provisioning:
    restart: "no"
    image: minio/mc
    container_name: minio-provisioning
    depends_on:
      - minio-proxy
    networks:
      - allure-net
    entrypoint: "/bin/sh -c"
    command: >
      "mc alias set ${ALLURE_S3_PROVIDER} ${ALLURE_S3_MINIO_URL} ${ALLURE_S3_ACCESS_KEY} ${ALLURE_S3_SECRET_KEY} --api S3v4 &&
      mc mb --ignore-existing ${ALLURE_S3_PROVIDER}/${ALLURE_S3_BUCKET} &&
      mc admin info ${ALLURE_S3_PROVIDER}"
    profiles:
      - minio-proxy

  prometheus:
    restart: always
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - allure-net
    profiles:
      - metrics
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - grafana:/var/lib/grafana
    env_file:
      - ./configs/grafana/config.monitoring
    networks:
      - allure-net
    profiles:
      - metrics

  report-pg-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: report-pg-exporter
    restart: always
    depends_on:
      - prometheus
    environment:
      DATA_SOURCE_NAME: "postgresql://${ALLURE_REPORT_DB_USERNAME}:${ALLURE_REPORT_DB_PASS}@${ALLURE_REPORT_DB_HOST}:${ALLURE_REPORT_DB_PORT}/${ALLURE_REPORT_DB_NAME}?sslmode=disable"
    networks:
      - allure-net
    profiles:
      - metrics

  uaa-pg-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: uaa-pg-exporter
    restart: always
    depends_on:
      - prometheus
    environment:
      DATA_SOURCE_NAME: "postgresql://${ALLURE_UAA_DB_USERNAME}:${ALLURE_UAA_DB_PASS}@${ALLURE_UAA_DB_HOST}:${ALLURE_UAA_DB_PORT}/${ALLURE_UAA_DB_NAME}?sslmode=disable"
    networks:
      - allure-net
    profiles:
      - metrics

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    container_name: rabbitmq-exporter
    restart: always
    depends_on:
      - prometheus
    networks:
      - allure-net
    environment:
      RABBIT_URL: http://${ALLURE_RABBIT_HOST}:15672
      RABBIT_USER: ${ALLURE_RABBIT_USER}
      RABBIT_PASSWORD: ${ALLURE_RABBIT_PASS}
    profiles:
      - metrics

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - allure-net
    profiles:
      - metrics

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - allure-net
    profiles:
      - metrics

  autoheal:
    restart: always
    container_name: autoheal
    image: willfarrell/autoheal
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
      AUTOHEAL_INTERVAL: 30
      AUTOHEAL_START_PERIOD: 60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  allure-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

volumes:
  redis-volume:
  rabbitmq-volume:
  minio-volume:
  minio-cache:
  uaa-db-volume:
  report-db-volume:
  prometheus:
  grafana:
